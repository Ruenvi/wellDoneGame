import os
from PySide6 import QtWidgets, QtCore, QtGui
import maya.cmds as cmds

try:
    from .recipe_data import RECIPE_DICT, SCORE_DICT  # type: ignore
except Exception:
    # Fallback recipe mapping: keys are frozensets of ingredient names (use chopped names where appropriate)
    RECIPE_DICT = {
        frozenset(['lettuce_chopped']): 'lettuce_salad',
        frozenset(['tomato_chopped', 'lettuce_chopped']): 'tomato_lettuce_salad',
        frozenset(['tomato_chopped', 'lettuce_chopped', 'cucamber_chopped']): 'delux_salad',
        frozenset(['tomato_soup']): 'tomato_soup',
    }
    SCORE_DICT = {
        'lettuce_salad': 5,
        'tomato_lettuce_salad': 10,
        'delux_salad': 15,
        'tomato_soup': 20,
    }

SOURCE_PATH = os.path.join(os.path.dirname(__file__), 'source_image')

# ------------------- ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á -------------------
def try_pick_item(game_widget, threshold=80):  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô 80
    if getattr(game_widget, 'has_item', False):
        print('‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß üß∫')
        return

    chef_geom = game_widget.chef.geometry()
    # ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏ü‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    chef_rect = QtCore.QRect(
        chef_geom.x() - 20,  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
        chef_geom.y() - 10,  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        chef_geom.width() + 40,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö
        chef_geom.height() + 20  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö
    )
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    found = False

    # 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ingredients
    for ing in getattr(game_widget, 'ingredients', []):
        name = ing['name']
        ing_widget = ing['widget']
        ing_geom = ing_widget.geometry()
        ing_center = QtCore.QPoint(
            ing_geom.x() + ing_geom.width() // 2,
            ing_geom.y() + ing_geom.height() // 2
        )
        dx = chef_center.x() - ing_center.x()
        dy = chef_center.y() - ing_center.y()
        distance = (dx**2 + dy**2) ** 0.5
        if distance <= threshold:
            game_widget.has_item = True
            game_widget.current_item = name
            pick_msg = f'‡∏´‡∏¢‡∏¥‡∏ö {name} ‚úÖ'
            print(pick_msg)
            game_page = getattr(game_widget, 'game_page', None)
            if game_page and hasattr(game_page, 'show_toast'):
                game_page.show_toast(pick_msg)
            show_pick_feedback(game_widget, name)
            found = True
            break

    # 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö placed_items (‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô)
    if not found and hasattr(game_widget, 'placed_items'):
        for item_label in list(game_widget.placed_items):  # ‡πÉ‡∏ä‡πâ list() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á loop
            name = getattr(item_label, 'item_name', None)
            if not name:
                continue

            item_geom = item_label.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = chef_center.x() - item_center.x()
            dy = chef_center.y() - item_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            if distance <= threshold:
                game_widget.has_item = True
                game_widget.current_item = name
                print(f'‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô: {name}')

                show_pick_feedback(game_widget, name)

                # ‡πÄ‡∏≠‡∏≤ icon ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏≠‡∏≠‡∏Å
                item_label.deleteLater()
                game_widget.placed_items.remove(item_label)
                found = True
                break

    if not found and hasattr(game_widget, 'chopping_board_icons'):
        for icon_label in list(game_widget.chopping_board_icons):
            name = icon_label.property('item_name') or getattr(icon_label, 'item_name', None)
            if not name:
                continue

            icon_geom = icon_label.geometry()
            icon_center = QtCore.QPoint(
                icon_geom.x() + icon_geom.width() // 2,
                icon_geom.y() + icon_geom.height() // 2
            )
            dx = chef_center.x() - icon_center.x()
            dy = chef_center.y() - icon_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            if distance <= threshold:
                game_widget.has_item = True
                game_widget.current_item = name
                print(f'üî™ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á: {name}')

                show_pick_feedback(game_widget, name)

                # ‡πÄ‡∏≠‡∏≤ icon ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á‡∏≠‡∏≠‡∏Å
                try:
                    game_widget.chopping_board_icons.remove(icon_label)
                except ValueError:
                    pass
                icon_label.deleteLater()
                found = True
                break

    if not found and hasattr(game_widget, "pot"):
        pot_geom = game_widget.pot.geometry()
        pot_center = QtCore.QPoint(
            pot_geom.x() + pot_geom.width() // 2,
            pot_geom.y() + pot_geom.height() // 2
        )

        dx = chef_center.x() - pot_center.x()
        dy = chef_center.y() - pot_center.y()
        distance_pot = (dx ** 2 + dy ** 2) ** 0.5

        if distance_pot <= threshold:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ã‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏ô‡∏ñ‡∏∂‡∏á‡∏´‡∏¢‡∏¥‡∏ö‡πÑ‡∏î‡πâ
            if hasattr(game_widget, "soup_icon"):
                if getattr(game_widget, "has_plate", False):
                    # ‡∏´‡∏¢‡∏¥‡∏ö‡∏ã‡∏∏‡∏õ‡πÉ‡∏™‡πà‡∏à‡∏≤‡∏ô
                    game_widget.soup_icon.deleteLater()
                    del game_widget.soup_icon

                    if hasattr(game_widget, "held_plate"):
                        game_widget.held_plate.deleteLater()
                        del game_widget.held_plate

                    plate_soup = QtWidgets.QLabel(game_widget)
                    plate_soup.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
                    soup_path = os.path.join(SOURCE_PATH, "image", "plate_tomato_soup_icon.png")
                    soup_pix = QtGui.QPixmap(soup_path)
                    plate_soup.setPixmap(soup_pix)
                    plate_soup.setScaledContents(True)
                    plate_soup.resize(64, 64)
                    plate_soup.move(game_widget.chef.x(), game_widget.chef.y() - 70)
                    plate_soup.show()

                    game_widget.held_plate = plate_soup
                    game_widget.has_plate = True
                    game_widget.has_item = True
                    game_widget.current_item = "tomato_soup"

                    show_pick_feedback(game_widget, "tomato_soup")
                    found = True
                else:
                    print("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ï‡∏±‡∏Å‡∏ã‡∏∏‡∏õ‡πÑ‡∏î‡πâ!")

            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 3 ‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô item ‡πÄ‡∏î‡∏¥‡∏°
            elif getattr(game_widget, "pot_contents", []):
                # ‡πÄ‡∏≠‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏°‡πâ‡∏≠
                item_name = game_widget.pot_contents.pop()
                item_label = game_widget.pot_icons.pop()
                item_label.deleteLater()

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏°‡∏∑‡∏≠
                game_widget.has_item = True
                game_widget.current_item = item_name
                show_pick_feedback(game_widget, item_name)

                # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                for idx, icon in enumerate(game_widget.pot_icons):
                    icon.move(
                        pot_geom.x() + (pot_geom.width() // 2) - 32 + idx * 45,
                        pot_geom.y() - 40
                    )

                print(f"ü•Ñ ‡∏´‡∏¢‡∏¥‡∏ö {item_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏°‡πâ‡∏≠ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏ô)")
            else:
                print("ü•£ ‡∏´‡∏°‡πâ‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏¥‡∏ö!")
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ pot ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç found
        pot_geom = None


    if not found:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß")

# ------------------- icon ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ä‡∏ü -------------------
def show_pick_feedback(game_widget, item_name):
    pix_path = os.path.join(SOURCE_PATH, 'image', f'{item_name}_icon.png')
    pix = QtGui.QPixmap(pix_path)
    if pix.isNull():
        return

    if getattr(game_widget, 'held_icon', None):
        game_widget.held_icon.deleteLater()
        game_widget.held_icon = None

    icon_label = QtWidgets.QLabel(game_widget)
    icon_label.setPixmap(pix)
    icon_label.setScaledContents(True)
    icon_label.resize(40, 40)

    icon_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    icon_label.setStyleSheet('background: transparent;')

    icon_label.show()
    game_widget.held_icon = icon_label

    update_held_icon_position(game_widget)

def update_held_icon_position(game_widget):
    if getattr(game_widget, 'held_icon', None):
        drop_x = game_widget.chef.x() + (game_widget.chef.width() - 40) // 2
        drop_y = game_widget.chef.y() - 40 - 5
        game_widget.held_icon.move(drop_x, drop_y)

# ------------------- ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á -------------------
def drop_item(game_widget):
    '‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü‡∏•‡∏á‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á, ‡∏´‡∏°‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô'

    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡πÑ‡∏´‡∏° ---
    if not getattr(game_widget, 'has_item', False):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠')
        return

    item_name = game_widget.current_item
    if not hasattr(game_widget, 'chef'):
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ chef ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
    chef = game_widget.chef
    chef_center = QtCore.QPoint(
        chef.x() + chef.width() // 2,
        chef.y() + chef.height() // 2
    )

    placed = False
    target_pos = None
    parent_widget = game_widget

    # ------------------------------------------------------------
    # üî™ 1) ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á
    # ------------------------------------------------------------
    if hasattr(game_widget, 'chopping_board'):
        board = game_widget.chopping_board
        board_geom = board.geometry()
        board_pos = board.mapToParent(QtCore.QPoint(0, 0))

        # ‡∏£‡∏∞‡∏¢‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏ü‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á
        dx = chef_center.x() - (board_pos.x() + board_geom.width() // 2)
        dy = chef_center.y() - (board_pos.y() + board_geom.height() // 2)
        distance = (dx ** 2 + dy ** 2) ** 0.5

        if distance < 120:
            # üîπ ‡∏ß‡∏≤‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            new_x = board_pos.x() + (board_geom.width() // 2) - 20
            new_y = board_pos.y()
            target_pos = QtCore.QPoint(new_x, new_y)
            placed = 'chopping_board'

    # ------------------------------------------------------------
    # ü•ò 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏°‡πâ‡∏≠
    # ------------------------------------------------------------
    if not placed and hasattr(game_widget, 'pot'):
        pot = game_widget.pot
        pot_geom = pot.geometry()
        pot_pos = pot.mapToParent(QtCore.QPoint(0, 0))

        dx = chef_center.x() - (pot_pos.x() + pot_geom.width() // 2)
        dy = chef_center.y() - (pot_pos.y() + pot_geom.height() // 2)
        distance = (dx ** 2 + dy ** 2) ** 0.5

        if distance < 120:
            # üîπ ‡∏ß‡∏≤‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏°‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            new_x = pot_pos.x() + (pot_geom.width() // 2) - 20
            new_y = pot_pos.y() - 35
            target_pos = QtCore.QPoint(new_x, new_y)
            placed = 'pot'

    # ------------------------------------------------------------
    # üì¶ 3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ station ‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
    # ------------------------------------------------------------
    if not placed:
        chef_x = chef.x() + chef.width() // 2 - 20
        chef_y = chef.y() + chef.height() - 10
        target_pos = QtCore.QPoint(chef_x, chef_y)
        placed = 'ground'

    # ------------------------------------------------------------
    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QLabel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô)
    # ------------------------------------------------------------
    item_label = QtWidgets.QLabel(parent_widget)
    pix_path = os.path.join(SOURCE_PATH, 'image', f'{item_name}_icon.png')

    if not os.path.exists(pix_path):
        print(f'‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û: {pix_path}')
        return

    pix = QtGui.QPixmap(pix_path)
    item_label.setPixmap(pix)
    item_label.setScaledContents(True)
    item_label.resize(40, 40)
    item_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    item_label.setStyleSheet('background: transparent;')
    item_label.move(target_pos)
    item_label.raise_()
    item_label.show()
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô QLabel ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á property ‡πÅ‡∏•‡∏∞ attribute)
    try:
        item_label.setProperty('item_name', item_name)
    except Exception:
        pass
    item_label.item_name = item_name

    # ------------------------------------------------------------
    # üîß ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö reference ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    # ------------------------------------------------------------
    if placed == 'chopping_board':
        if not hasattr(game_widget, 'chopping_board_icons'):
            game_widget.chopping_board_icons = []
        game_widget.chopping_board_icons.append(item_label)
        print(f'üî™ ‡∏ß‡∏≤‡∏á {item_name} ‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà {target_pos}')

    elif placed == 'pot':
        if not hasattr(game_widget, 'pot_icons'):
            game_widget.pot_icons = []
        if not hasattr(game_widget, 'pot_contents'):
            game_widget.pot_contents = []
        game_widget.pot_icons.append(item_label)
        game_widget.pot_contents.append(item_name)
        # ‡πÉ‡∏´‡πâ QLabel ‡πÉ‡∏ô‡∏´‡∏°‡πâ‡∏≠‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        try:
            item_label.setProperty('item_name', item_name)
        except Exception:
            pass
        item_label.item_name = item_name
        
        # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡πâ‡∏≠
        num_items = len(game_widget.pot_icons)
        pot_geom = game_widget.pot.geometry()
        item_x = pot_geom.x() + (num_items - 1) * 30  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 30 pixels
        item_y = pot_geom.y() - 35  # ‡∏ß‡∏≤‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏°‡πâ‡∏≠‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
        item_label.move(item_x, item_y)
        
        print(f'ü•ò ‡∏ß‡∏≤‡∏á {item_name} ‡∏•‡∏á‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏µ‡πà {item_x}, {item_y}')
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡πâ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ñ‡∏£‡∏ö‡∏™‡∏π‡∏ï‡∏£
        try:
            try_cook_pot(game_widget)
        except Exception:
            pass

    else:
        if not hasattr(game_widget, 'placed_items'):
            game_widget.placed_items = []
        game_widget.placed_items.append(item_label)
        # ‡πÉ‡∏´‡πâ QLabel ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏°‡∏µ item_name ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        try:
            item_label.setProperty('item_name', item_name)
        except Exception:
            pass
        item_label.item_name = item_name
        print(f'üì¶ ‡∏ß‡∏≤‡∏á {item_name} ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {target_pos}')

    # ------------------------------------------------------------
    # üßπ ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ (‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà)
    # ------------------------------------------------------------
    if getattr(game_widget, 'held_icon', None):
        game_widget.held_icon.deleteLater()
        game_widget.held_icon = None

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á
    drop_msg = ''
    if placed == 'chopping_board':
        drop_msg = f'‡∏ß‡∏≤‡∏á {item_name} ‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á üî™'
    elif placed == 'pot':
        drop_msg = f'‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏´‡∏°‡πâ‡∏≠ ü•ò'
    else:
        drop_msg = f'‡∏ß‡∏≤‡∏á {item_name} ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô üì¶'
        
    print(drop_msg)
        
    game_widget.has_item = False
    game_widget.current_item = None

# ------------------- ‡∏´‡∏±‡πà‡∏ô -------------------
def process_space_action(game_widget):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏ü‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ chopping_board ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not is_near_object(game_widget.chef, game_widget.chopping_board):
        return

    # ‡∏ñ‡πâ‡∏≤ chopping_board ‡∏°‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
    for icon_label in game_widget.chopping_board_icons:
        item_name = icon_label.property('item_name')
        if not item_name:
            continue

        chopped_name = f'{item_name}_chopped'
        pix_path = os.path.join(SOURCE_PATH, 'image', f'{chopped_name}_icon.png')
        pix = QtGui.QPixmap(pix_path)
        if pix.isNull():
            print(f'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {pix_path}')
            continue

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QTimer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏±‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        def finish_chop():
            icon_label.setPixmap(pix)
            icon_label.setScaledContents(True)
            icon_label.setProperty('item_name', chopped_name)
            # ‡πÉ‡∏´‡πâ attribute ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô attribute ‡πÅ‡∏ó‡∏ô property)
            try:
                icon_label.item_name = chopped_name
            except Exception:
                pass
            # ‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö chopping_board
            icon_label.move(game_widget.chopping_board.x(), game_widget.chopping_board.y())
            print(f'‚úÖ ‡∏´‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {chopped_name}')

        # ‡πÅ‡∏™‡∏î‡∏á toast ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏±‡πà‡∏ô
    try:
        if hasattr(game_widget, 'game_page') and game_widget.game_page:
            game_widget.game_page.show_toast(f'‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏±‡πà‡∏ô {item_name}... ‚åõ', duration=3000)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á toast ‡πÑ‡∏î‡πâ: {e}")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î delay 3000 ms (3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    QtCore.QTimer.singleShot(3000, finish_chop)
    print(f'‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: {item_name}')

# ------------------- ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ ------------------

def try_throw_item_to_trash(game_widget, threshold=80):
    """
    ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ trash_bin ‚Üí ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á)
    """
    if not hasattr(game_widget, 'trash_bin'):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return

    chef_geom = game_widget.chef.geometry()
    trash_geom = game_widget.trash_bin.geometry()

    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )
    trash_center = QtCore.QPoint(
        trash_geom.x() + trash_geom.width() // 2,
        trash_geom.y() + trash_geom.height() // 2
    )

    dx = chef_center.x() - trash_center.x()
    dy = chef_center.y() - trash_center.y()
    distance = (dx**2 + dy**2) ** 0.5

    if distance > threshold:
        print(f'üö´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏û‡∏≠ ({int(distance)} px)')
        return

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ ‚Üí ‡∏ó‡∏¥‡πâ‡∏á
    if getattr(game_widget, 'has_item', False):
        item_name = game_widget.current_item
        print(f'üóëÔ∏è ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á: {item_name}')
        game_widget.has_item = False
        game_widget.current_item = None

        if getattr(game_widget, 'held_icon', None):
            game_widget.held_icon.deleteLater()
            game_widget.held_icon = None
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ ‚Üí ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á
    if hasattr(game_widget, 'placed_items'):
        for item_label in list(game_widget.placed_items):
            item_geom = item_label.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = trash_center.x() - item_center.x()
            dy = trash_center.y() - item_center.y()
            dist_item = (dx**2 + dy**2) ** 0.5

            if dist_item <= threshold:
                print(f'üóëÔ∏è ‡πÄ‡∏Å‡πá‡∏ö {item_label.item_name} ‡∏ó‡∏¥‡πâ‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞')
                item_label.deleteLater()
                game_widget.placed_items.remove(item_label)

    print('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!')

# ============================================================
# üß∫ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö '‡∏à‡∏≤‡∏ô (Plate)'
# ============================================================

def add_item_to_plate(game_widget, item_name):
    '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û'
    if not hasattr(game_widget, 'plate_station'):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ plate_station ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return

    if not hasattr(game_widget, 'plate_items'):
        game_widget.plate_items = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏ô‡πÑ‡∏´‡∏°
    if not is_near_object(game_widget.chef, game_widget.plate, mode='center'):
        print('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏ô')
        return
    
    # üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô raw ‡πÅ‡∏ï‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô chopped -> ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    try:
        # RECIPE_DICT ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å recipe_data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        recipe_map = RECIPE_DICT if isinstance(RECIPE_DICT, dict) and RECIPE_DICT else {}
    except Exception:
        recipe_map = {}

    # ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡πà‡∏ô 'tomato_chopped' ‡∏´‡∏£‡∏∑‡∏≠ 'tomato')
    used_names = set()
    for key in recipe_map.keys():
        try:
            for n in key:
                used_names.add(n)
        except Exception:
            pass

    # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏ä‡πâ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ _chopped ‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if (item_name not in used_names) and (f"{item_name}_chopped" in used_names):
        print(f'‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡πà‡∏ô "{item_name}" ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡πÑ‡∏î‡πâ')
        return

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡∏à‡∏≤‡∏ô
    if not hasattr(game_widget, 'plate_items'):
        game_widget.plate_items = []
    game_widget.plate_items.append(item_name)
    add_msg = f'‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô üçΩÔ∏è'
    print(add_msg)
    try:
        if hasattr(game_widget, 'game_page') and game_widget.game_page:
            game_widget.game_page.show_toast(add_msg)
            print("‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast: " + add_msg)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á toast ‡πÑ‡∏î‡πâ: {e}")

    update_plate_image(game_widget)


def update_plate_image(game_widget, target_label=None, items=None):
    if target_label is None:
        target_label = getattr(game_widget, 'plate_station', None)
        if target_label is None:
            print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ target_label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏ô')
            return

    if items is None:
        items = getattr(game_widget, 'plate_items', [])

    # üîπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
    clean_items = [item.strip().lower() for item in items]
    items_set = frozenset(clean_items)

    # ‡πÉ‡∏ä‡πâ RECIPE_DICT ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å recipe_data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÄ‡∏õ‡πá‡∏ô authoritative source)
    try:
        recipe_map = RECIPE_DICT if isinstance(RECIPE_DICT, dict) and RECIPE_DICT else None
    except Exception:
        recipe_map = None

    if recipe_map is None:
        recipe_map = {
            frozenset(['lettuce_chopped']): 'lettuce_salad',
            frozenset(['tomato_chopped', 'lettuce_chopped']): 'tomato_lettuce_salad',
            frozenset(['tomato_chopped', 'lettuce_chopped', 'cucamber_chopped']): 'delux_salad',
            frozenset(['tomato_soup']): 'tomato_soup',
        }

    # ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    if hasattr(target_label, 'ingredient_icons'):
        for icon in target_label.ingredient_icons:
            icon.deleteLater()
        target_label.ingredient_icons.clear()
    else:
        target_label.ingredient_icons = []

    combo_name = recipe_map.get(items_set, None)

    if combo_name:
        combo_image_name = f'plate_{combo_name}.png'
        combo_path = os.path.join(SOURCE_PATH, 'image', combo_image_name)
        if not os.path.exists(combo_path):
            combo_path = os.path.join(SOURCE_PATH, 'image', 'plate.png')

        pix = QtGui.QPixmap(combo_path)
        target_label.clear()
        target_label.setPixmap(pix)
        target_label.setScaledContents(True)
        target_label.repaint()  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ refresh ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

        print(f'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {combo_name}')


    else:
        plate_base = os.path.join(SOURCE_PATH, 'image', 'plate.png')
        pix = QtGui.QPixmap(plate_base)
        target_label.setPixmap(pix)
        target_label.setScaledContents(True)

        base_x = target_label.x()
        base_y = target_label.y()
        spacing = 20

        for i, ingredient in enumerate(clean_items):
            icon_path = os.path.join(SOURCE_PATH, 'image', f'{ingredient}.png')
            if os.path.exists(icon_path):
                icon_label = QtWidgets.QLabel(game_widget)
                icon_pix = QtGui.QPixmap(icon_path)
                icon_label.setPixmap(icon_pix)
                icon_label.setScaledContents(True)
                icon_label.resize(32, 32)
                icon_label.move(base_x + 16, base_y - (i + 1) * spacing)
                icon_label.show()
                target_label.ingredient_icons.append(icon_label)

        print(f'ü•ó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏™‡∏π‡∏ï‡∏£: ‡πÅ‡∏™‡∏î‡∏á {len(clean_items)} ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏ô')

def try_pickup_plate(game_widget):
    '‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏ü‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏à‡∏≤‡∏Å station ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô‡∏à‡∏≤‡∏ô)'
    # üß∫ ‡∏ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡∏¢
    if getattr(game_widget, 'has_item', False):
        print('‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß üß∫')
        return

    # üî∏ ‡∏•‡∏ö‡∏à‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if hasattr(game_widget, 'held_plate') and game_widget.held_plate:
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    # üìç ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏ä‡∏ü
    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    threshold = getattr(game_widget, 'pickup_threshold', 40)

    # 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ plate_station ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if hasattr(game_widget, 'plate_station') and is_near_object(game_widget.chef, game_widget.plate_station, mode='center'):
        if getattr(game_widget, 'has_plate', False):
            print('‚ö†Ô∏è ‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
            return

        # ‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å station
        game_widget.has_plate = True
        game_widget.current_item = 'plate'
        game_widget.plate_items = []

        held_plate = QtWidgets.QLabel(game_widget)
        img_path = os.path.join(SOURCE_PATH, 'image', 'plate.png')
        if os.path.exists(img_path):
            held_plate.setPixmap(QtGui.QPixmap(img_path))
        held_plate.setScaledContents(True)
        held_plate.resize(50, 50)
        held_plate.setStyleSheet('background: transparent;')
        held_plate.show()

        # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ä‡∏ü
        update_plate_position(game_widget, game_widget.chef, held_plate)
        held_plate.ingredient_icons = []  # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
        game_widget.held_plate = held_plate

        print('‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å station!')
        return

    # 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à dropped_plates (‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô)
    if hasattr(game_widget, 'dropped_plates'):
        for plate_dict in list(game_widget.dropped_plates):
            lbl = plate_dict.get('label')
            items_on_plate = plate_dict.get('items', [])

            if lbl is None:
                continue

            # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ä‡∏ü‡∏Å‡∏±‡∏ö‡∏à‡∏≤‡∏ô
            item_geom = lbl.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = chef_center.x() - item_center.x()
            dy = chef_center.y() - item_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            if distance <= threshold:
                # ‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                game_widget.has_plate = True
                game_widget.current_item = 'plate'
                game_widget.plate_items = list(items_on_plate)

                held_plate = QtWidgets.QLabel(game_widget)
                img_path = os.path.join(SOURCE_PATH, 'image', 'plate_icon.png')
                if os.path.exists(img_path):
                    held_plate.setPixmap(QtGui.QPixmap(img_path))
                held_plate.setScaledContents(True)
                held_plate.resize(50, 50)
                held_plate.setStyleSheet('background: transparent;')
                held_plate.show()

                # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ä‡∏ü
                update_plate_position(game_widget, game_widget.chef, held_plate)
                held_plate.ingredient_icons = []

                # üîπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
                clean_items = [item.strip().lower() for item in game_widget.plate_items]

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á combo
                update_plate_image(game_widget, target_label=held_plate, items=game_widget.plate_items)

                game_widget.held_plate = held_plate

                # ‡∏•‡∏ö‡∏à‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô
                lbl.deleteLater()
                try:
                    game_widget.dropped_plates.remove(plate_dict)
                except ValueError:
                    pass

                print(f'‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô: {game_widget.plate_items}')
                return

    print('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏ô‡πÉ‡∏î ‡πÜ')

def add_item_to_held_plate(game_widget, item_name):
    '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà (held_plate)'
    if not getattr(game_widget, 'has_plate', False):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠')
        return

    if not hasattr(game_widget, 'held_plate') or game_widget.held_plate is None:
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ held_plate')
        return

    if not hasattr(game_widget, 'plate_items'):
        game_widget.plate_items = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏π‡∏ï‡∏£: ‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ xxx_chopped ‡πÅ‡∏ï‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏™‡πà xxx ‡∏î‡∏¥‡∏ö -> ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    try:
        recipe_map = RECIPE_DICT if isinstance(RECIPE_DICT, dict) and RECIPE_DICT else {}
    except Exception:
        recipe_map = {}
    used_names = set()
    for key in recipe_map.keys():
        try:
            for n in key:
                used_names.add(n)
        except Exception:
            pass

    if (item_name not in used_names) and (f"{item_name}_chopped" in used_names):
        print(f'‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡πà‡∏ô "{item_name}" ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡πÑ‡∏î‡πâ')
        return

    game_widget.plate_items.append(item_name)
    print(f'üçΩÔ∏è ‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà: {game_widget.plate_items}')

    try:
        update_plate_image(game_widget, target_label=game_widget.held_plate, items=game_widget.plate_items)
    except Exception:
        pass

def add_item_to_dropped_plate(game_widget, plate_dict, item_name):
    '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏™‡∏π‡∏ï‡∏£'
    lbl = plate_dict.get('label')
    if lbl is None or not isinstance(lbl, QtWidgets.QLabel):
        print('‚ùå plate label ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ chopped
    try:
        recipe_map = RECIPE_DICT if isinstance(RECIPE_DICT, dict) and RECIPE_DICT else {}
    except Exception:
        recipe_map = {}
    used_names = set()
    for key in recipe_map.keys():
        try:
            for n in key:
                used_names.add(n)
        except Exception:
            pass
    if (item_name not in used_names) and (f"{item_name}_chopped" in used_names):
        print(f'‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡πà‡∏ô "{item_name}" ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡πÑ‡∏î‡πâ')
        return

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ list
    items = list(plate_dict.get('items', []))
    items.append(item_name)
    plate_dict['items'] = items
    print(f'üçΩÔ∏è ‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô: {items}')

    # üîß ‡∏•‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    lbl.clear()
    lbl.repaint()

    # üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å update_plate_image ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á QLabel ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
    update_plate_image(game_widget, target_label=lbl, items=items)

    # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh QLabel ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà
    lbl.raise_()
    lbl.show()
    lbl.repaint()

    print('‚úÖ ‡∏à‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')

def is_near_object(obj_a, obj_b, threshold=60, mode='center'):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ obj_a ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ obj_b ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    mode:
        - 'center' : ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö station ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
        - 'bounds' : ‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á bounding box (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö trash_bin ‡∏´‡∏£‡∏∑‡∏≠ collision check)
    """
    if not (obj_a and obj_b):
        return False

    if mode == 'center':
        # --- ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á ---
        ax = obj_a.x() + obj_a.width() / 2
        ay = obj_a.y() + obj_a.height() / 2
        bx = obj_b.x() + obj_b.width() / 2
        by = obj_b.y() + obj_b.height() / 2
        distance = ((ax - bx) ** 2 + (ay - by) ** 2) ** 0.5

    elif mode == 'bounds':
        # --- ‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô trash) ---
        a_rect = QtCore.QRect(obj_a.x(), obj_a.y(), obj_a.width(), obj_a.height())
        b_rect = QtCore.QRect(obj_b.x(), obj_b.y(), obj_b.width(), obj_b.height())

        dx = max(b_rect.left() - a_rect.right(), a_rect.left() - b_rect.right(), 0)
        dy = max(b_rect.top() - a_rect.bottom(), a_rect.top() - b_rect.bottom(), 0)
        distance = (dx**2 + dy**2) ** 0.5

    else:
        raise ValueError("mode ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'center' ‡∏´‡∏£‡∏∑‡∏≠ 'bounds'")

    return distance < threshold


def update_plate_position(game_widget, chef, plate_label):
    '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ä‡∏ü'
    plate_x = chef.x() + (chef.width() - plate_label.width()) // 2
    plate_y = chef.y() - plate_label.height() + 10  # +10 ‡πÉ‡∏´‡πâ‡∏à‡∏≤‡∏ô‡∏•‡∏≠‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
    plate_label.move(plate_x, plate_y)

def drop_plate(game_widget):
    '‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô'
    if not getattr(game_widget, 'has_plate', False):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠')
        return

    chef_x = game_widget.chef.x()
    chef_y = game_widget.chef.y()

    dropped_label = QtWidgets.QLabel(game_widget)
    dropped_label.setGeometry(chef_x + 40, chef_y + 40, 50, 50)
    dropped_label.setStyleSheet('background: transparent;')
    dropped_label.show()

    update_plate_image(game_widget, target_label=dropped_label, items=getattr(game_widget, 'plate_items', []))

    if not hasattr(game_widget, 'dropped_plates'):
        game_widget.dropped_plates = []
    game_widget.dropped_plates.append({
        'label': dropped_label,
        'items': list(getattr(game_widget, 'plate_items', []))
    })

    game_widget.has_plate = False
    game_widget.current_item = None
    game_widget.plate_items = []
    if hasattr(game_widget, 'held_plate'):
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    drop_msg = '‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô üß∫'
    print(drop_msg)
    game_page = getattr(game_widget, 'game_page', None)
    if game_page and hasattr(game_page, 'show_toast'):
        game_page.show_toast(drop_msg)

def is_near_trash(game_widget, threshold=40):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏ü‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return: True ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ threshold, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    """
    if not hasattr(game_widget, 'trash_bin') or game_widget.trash_bin is None:
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return False

    chef_geom = game_widget.chef.geometry()
    trash_geom = game_widget.trash_bin.geometry()

    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )
    trash_center = QtCore.QPoint(
        trash_geom.x() + trash_geom.width() // 2,
        trash_geom.y() + trash_geom.height() // 2
    )

    dx = chef_center.x() - trash_center.x()
    dy = chef_center.y() - trash_center.y()
    distance = (dx ** 2 + dy ** 2) ** 0.5

    return distance <= threshold

def throw_plate_to_trash(game_widget):
    '‡∏ó‡∏¥‡πâ‡∏á‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞'
    if not getattr(game_widget, 'has_plate', False):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠')
        return
    if not hasattr(game_widget, 'trash_bin'):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return

    if not is_near_trash(game_widget):
        print('üö´ ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞')
        return

    print('üóëÔ∏è ‡∏ó‡∏¥‡πâ‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÅ‡∏•‡πâ‡∏ß')
    if hasattr(game_widget, 'held_plate'):
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    game_widget.has_plate = False
    game_widget.current_item = None
    game_widget.plate_items = []

' serve station '

def try_serve_plate(game_widget, threshold=80):

    if not hasattr(game_widget, 'serve_station'):
        print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ serve_station ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°')
        return False

    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    serv_geom = game_widget.serve_station.geometry()
    serv_center = QtCore.QPoint(
        serv_geom.x() + serv_geom.width() // 2,
        serv_geom.y() + serv_geom.height() // 2
    )

    dx = chef_center.x() - serv_center.x()
    dy = chef_center.y() - serv_center.y()
    distance = (dx**2 + dy**2) ** 0.5

    if distance > threshold:
        far_msg = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü üö´'
        print(far_msg)
        try:
            if game_page and hasattr(game_page, 'show_toast'):
                game_page.show_toast(far_msg, duration=3000)
                print("‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á")
        except Exception as e:
            print(f"‚ùå Error showing toast: {e}")
        return False

    # ‡∏´‡∏≤ game_page ‡∏ñ‡πâ‡∏≤ GameWidget ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏ß‡πâ
    game_page = getattr(game_widget, 'game_page', None)
    parent = game_page or game_widget.parent()

    # ‡πÉ‡∏ä‡πâ SCORE_DICT ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å recipe_data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    try:
        score_dict = SCORE_DICT if isinstance(SCORE_DICT, dict) and SCORE_DICT else {}
    except Exception:
        score_dict = {}

    # current_orders ‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å game_page.orders ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏ß‡πâ, ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô fallback ‡πÑ‡∏õ‡∏¢‡∏±‡∏á property ‡∏ö‡∏ô widget
    if game_page is not None and hasattr(game_page, 'orders'):
        current_orders = game_page.orders
    else:
        current_orders = getattr(game_widget, 'current_orders', [])
    if not isinstance(current_orders, list):
        current_orders = []

    def check_and_score(plate_items):
        # ‡πÉ‡∏ä‡πâ RECIPE_DICT ‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å recipe_data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        try:
            recipe_map = RECIPE_DICT if isinstance(RECIPE_DICT, dict) and RECIPE_DICT else None
        except Exception:
            recipe_map = None

        if recipe_map is None:
            recipe_map = {
                frozenset(['lettuce_chopped']): 'lettuce_salad',
                frozenset(['tomato_chopped', 'lettuce_chopped']): 'tomato_lettuce_salad',
                frozenset(['tomato_chopped', 'lettuce_chopped', 'cucamber_chopped']): 'delux_salad',
                frozenset(['tomato_soup']): 'tomato_soup',
            }

        meal_name = None
        for recipe, name in recipe_map.items():
            if set(plate_items) == set(recipe):
                meal_name = name
                break

        if not meal_name:
            print('üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏î ‡πÜ')
            return 0

        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å authoritative orders ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        in_orders = False
        if game_page is not None and hasattr(game_page, 'orders'):
            in_orders = meal_name in game_page.orders
        else:
            in_orders = meal_name in current_orders

        if in_orders:
            score = score_dict.get(meal_name, 0)
            success_msg = f'‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü {meal_name} ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á +{score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‚úÖ'
            print(success_msg)
            try:
                if game_page and hasattr(game_page, 'show_toast'):
                    game_page.show_toast(success_msg, duration=4000)
                    print("‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                print(f"‚ùå Error showing toast: {e}")
            spawn_served_object(meal_name, spacing=3.0)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï authoritative orders ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô GamePage
            if game_page is not None and hasattr(game_page, 'serve_dish_to_order'):
                try:
                    game_page.serve_dish_to_order(meal_name)
                except Exception:
                    try:
                        # fallback: remove and refresh
                        game_page.orders.remove(meal_name)
                        if hasattr(game_page, '_refresh_orders_images'):
                            game_page._refresh_orders_images()
                    except Exception:
                        pass
            else:
                try:
                    current_orders.remove(meal_name)
                except Exception:
                    pass
            return score
        else:
            fail_msg = f'‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü {meal_name} ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå ‚ùå (-5)'
            print(f'‚ö†Ô∏è {fail_msg}')
            try:
                if game_page and hasattr(game_page, 'show_toast'):
                    game_page.show_toast(fail_msg, duration=4000)
                    print("‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏ú‡∏¥‡∏î")
            except Exception as e:
                print(f"‚ùå Error showing toast: {e}")
            return -5

    def update_score(amount):
        target = game_page if game_page is not None else parent
        if target is not None and hasattr(target, 'score_label'):
            try:
                num = int(target.score_label.text())
            except Exception:
                num = 0

            num += amount
            if num < 0:
                num = 0

            target.score_label.setText(str(num))

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô GamePage ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            if hasattr(target, 'current_score'):
                target.current_score = num


    # ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏à‡∏≤‡∏Å‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠
    if getattr(game_widget, 'has_plate', False):
        plate_items = getattr(game_widget, 'plate_items', [])
        score = check_and_score(plate_items)
        update_score(score)

        if hasattr(game_widget, 'held_plate') and game_widget.held_plate:
            game_widget.held_plate.deleteLater()
            game_widget.held_plate = None

        game_widget.has_plate = False
        game_widget.current_item = None
        game_widget.plate_items = []
        return True

    # ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏à‡∏≤‡∏Å‡∏à‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
    if hasattr(game_widget, 'dropped_plates'):
        for plate_dict in list(game_widget.dropped_plates):
            lbl = plate_dict.get('label')
            if lbl is None:
                continue

            item_geom = lbl.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = serv_center.x() - item_center.x()
            dy = serv_center.y() - item_center.y()
            dist_item = (dx**2 + dy**2) ** 0.5

            if dist_item <= threshold:
                plate_items = plate_dict.get('items', [])
                score = check_and_score(plate_items)
                update_score(score)

                lbl.deleteLater()
                try:
                    game_widget.dropped_plates.remove(plate_dict)
                except Exception:
                    pass
                return True

    print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü')
    return False


def try_cook_pot(game_widget):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏´‡∏°‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏™‡∏£‡πâ‡∏≤‡∏á soup_icon ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ -> return
    if not hasattr(game_widget, 'pot'):
        return False
    contents = getattr(game_widget, 'pot_contents', [])
    icons = getattr(game_widget, 'pot_icons', [])

    print(f'[pot] current pot_contents={contents}')
    if not contents:
        return False

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ soup ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
    if hasattr(game_widget, 'soup_icon'):
        return False

    # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠ base ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (‡∏ï‡∏±‡∏î '_chopped') ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö
    bases = [c.replace('_chopped', '').replace('_icon', '') for c in contents]
    counts = {}
    for b in bases:
        counts[b] = counts.get(b, 0) + 1

    # ‡∏Å‡∏é‡∏á‡πà‡∏≤‡∏¢ ‡πÜ: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏® 3 ‡∏ä‡∏¥‡πâ‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏ã‡∏∏‡∏õ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®
    chosen_base = None
    for k, v in counts.items():
        if k == 'tomato' and v >= 3:
            chosen_base = k
            break
    if chosen_base is None and len(contents) >= 3:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏ô‡∏¥‡∏î‡∏ã‡πâ‡∏≥ ‡πÅ‡∏ï‡πà‡πÉ‡∏™‡πà‡∏Ñ‡∏£‡∏ö 3 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏£‡∏Å
        chosen_base = bases[0]

    if not chosen_base:
        return False

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡∏∏‡∏õ (mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
    soup_name = None
    if chosen_base == 'tomato':
        soup_name = 'tomato_soup'
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° mapping ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

    if not soup_name:
        return False

    # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏ã‡∏∏‡∏õ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    def cook_finish():
        # ‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏´‡∏°‡πâ‡∏≠
        for ic in list(icons):
            try:
                ic.deleteLater()
            except Exception:
                pass
        game_widget.pot_icons = []
        game_widget.pot_contents = []

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ã‡∏∏‡∏õ‡∏ö‡∏ô‡∏´‡∏°‡πâ‡∏≠
        pot_geom = game_widget.pot.geometry()
        pot_pos = game_widget.pot.mapToParent(QtCore.QPoint(0, 0))

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QLabel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∏‡∏õ
        soup_lbl = QtWidgets.QLabel(game_widget)

        # ‡πÇ‡∏´‡∏•‡∏î PNG (‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™)
        soup_path = os.path.join(SOURCE_PATH, 'image', f'{soup_name}.png')
        pix = QtGui.QPixmap(soup_path) if os.path.exists(soup_path) else QtGui.QPixmap()
        soup_lbl.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        soup_lbl.setPixmap(pix)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ QLabel ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
        soup_lbl.setScaledContents(True)
        soup_lbl.resize(49, 57)

        # ‡∏ß‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏°‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        soup_lbl.move(
            pot_pos.x() + (pot_geom.width() - 48) // 2,
            pot_pos.y() - 40
        )

        soup_lbl.show()

        game_widget.soup_icon = soup_lbl
        print(f'üç≤ ‡∏ï‡πâ‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {soup_name} (created soup_icon)')

    # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ó‡∏≥‡∏ã‡∏∏‡∏õ
    QtCore.QTimer.singleShot(4000, cook_finish)
    print('‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏°‡∏ã‡∏∏‡∏õ... (2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)')
    if hasattr(game_widget, 'game_page') and game_widget.game_page:
        game_widget.game_page.show_toast('‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏°‡∏ã‡∏∏‡∏õ... (4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)')
    return True
    game_widget.soup_icon = soup_lbl

    print(f'üç≤ ‡∏ï‡πâ‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {soup_name} (created soup_icon)')
    if hasattr(game_widget, 'game_page') and game_widget.game_page:
        game_widget.game_page.show_toast(f'üç≤ ‡∏ï‡πâ‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {soup_name}')
    return True

"""------------Invisible Colliders-----------"""
def _create_invisible_walls(self):
    zones = [
        QtCore.QRect(725, 295, 15, 235),
        QtCore.QRect(520, 120, 30, 130),
        QtCore.QRect(1000, 460, 100, 65),
        QtCore.QRect(790, 510, 200, 15),
        QtCore.QRect(1130, 180, 80, 250),
        QtCore.QRect(65, 290, 80, 110),
        QtCore.QRect(195, 80, 355, 65),
        QtCore.QRect(715, 80, 260, 65),
        QtCore.QRect(195, 480, 355, 50)
    ]
    for rect in zones:
        box = QtWidgets.QFrame(self)
        box.setGeometry(rect)
        #box.setStyleSheet("background-color: rgba(255, 0, 0, 100); border: 1px solid red;")
        box.setStyleSheet("background: transparent;")
        box.hide()
        self.obstacles.append(box)

def _can_move_to(self, new_x, new_y):
    new_rect = QtCore.QRect(new_x, new_y, self.chef.width(), self.chef.height())
    for obs in getattr(self, "obstacles", []):
        if new_rect.intersects(obs.geometry()):
            return False
    return True

def spawn_served_object(menu_name, spacing=3.0, row_spacing=3.0):

    menu_to_object = {
        "tomato_soup": "sphere",             # ‡∏ã‡∏∏‡∏õ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏® -> ‡∏ó‡∏£‡∏á‡∏Å‡∏•‡∏°
        "lettuce_salad": "cube",             # ‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å -> ‡∏ó‡∏£‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        "tomato_lettuce_salad": "cylinder",  # ‡∏™‡∏•‡∏±‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏® -> ‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å
        "delux_salad": "cone",               # ‡∏™‡∏•‡∏±‡∏î‡∏£‡∏ß‡∏° -> ‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏ß‡∏¢
        "lettuce_tomato_salad": "cylinder"   # ‡∏™‡∏•‡∏±‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏ú‡∏±‡∏î -> ‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å
    }

    menu_to_row = {
        "tomato_soup": 0,
        "lettuce_salad": 1,
        "tomato_lettuce_salad": 2,
        "lettuce_tomato_salad": 2,  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö tomato_lettuce_salad
        "delux_salad": 3
    }

    if menu_name not in menu_to_object:
        cmds.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏ä‡∏∑‡πà‡∏≠ '{menu_name}' ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ mapping.")
        return

    object_type = menu_to_object[menu_name]
    row_index = menu_to_row.get(menu_name, 0)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å

    existing_objs = cmds.ls(f"{menu_name}_*")
    next_index = len(existing_objs) + 1

    obj_name = f"{menu_name}_{next_index}"

    if object_type == "sphere":
        obj = cmds.polySphere(name=obj_name)[0]
    elif object_type == "cube":
        obj = cmds.polyCube(name=obj_name)[0]
    elif object_type == "cylinder":
        obj = cmds.polyCylinder(name=obj_name)[0]
    elif object_type == "cone":
        obj = cmds.polyCone(name=obj_name)[0]
    else:
        cmds.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å object_type: {object_type}")
        return

    x_pos = (next_index - 1) * spacing
    y_pos = row_index * row_spacing
    cmds.move(x_pos, y_pos, 0, obj, absolute=True)

    print(f"‚úÖ Created {obj_name} ({object_type}) at X={x_pos}, Y={y_pos}")
    return obj
