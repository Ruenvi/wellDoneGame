from PySide6 import QtCore, QtGui, QtWidgets
from shiboken6 import wrapInstance
import maya.OpenMayaUI as omui
import importlib
import sys, os
import time
import random

# Support running as a package (relative import) or as a standalone script
try:
    from . import wellDoneGameUtil as wdutil
except Exception:
    import wellDoneGameUtil as wdutil
try:
    importlib.reload(wdutil)
except Exception:
    pass

SOURCE_PATH = os.path.join(os.path.dirname(__file__), "source_image", "image")

class GameMenu(QtWidgets.QWidget):
    def __init__(self, stacked_widget, parent=None):
        super().__init__(parent)
        self.stacked_widget = stacked_widget

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.bg = QtWidgets.QLabel(self)
        self.bg.setPixmap(QtGui.QPixmap(f"{SOURCE_PATH}/background.png"))
        self.bg.setScaledContents(True)
        self.bg.lower()

        self.menuLayout = QtWidgets.QVBoxLayout()
        self.menuLayout.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.menuLayout.setContentsMargins(75, 90, 0, 0)

        self.startButton = QtWidgets.QPushButton('START')
        # ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î start_new_game ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.startButton.clicked.connect(self.start_new_game)
        self.startButton.setStyleSheet("""
            QPushButton {
                background-color: rgba(216, 110, 14, 0);
                color: #7f7b71;
                border-radius: 2px;
                font-size: 40px;
                font-family: "Showcard Gothic";
                padding: 2px;
            }
            QPushButton:hover {
                background-color: rgba(216, 110, 14, 180);
                color: #e1e8e4;
            }
            QPushButton:pressed {
                background-color: rgba(75, 53, 42, 255);
                color: white;
            }
        """)

        self.howtoplayButton = QtWidgets.QPushButton('HOW TO PLAY')
        self.howtoplayButton.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))
        self.howtoplayButton.setStyleSheet("""
            QPushButton {
                background-color: rgba(216, 110, 14, 0);
                color: #7f7b71;
                border-radius: 2px;
                font-size: 22px;
                font-family: "Showcard Gothic";
                padding: 8px;
            }
            QPushButton:hover {
                background-color: rgba(216, 110, 14, 180);
                color: #e1e8e4;
            }
            QPushButton:pressed {
                background-color: rgba(75, 53, 42, 255);
                color: white;
            }
        """)


        self.exitButton = QtWidgets.QPushButton('EXIT')
        self.exitButton.clicked.connect(self.close_main_window)
        self.exitButton.setStyleSheet("""
            QPushButton {
                background-color: rgba(216, 110, 14, 0);
                color: #7f7b71;
                border-radius: 2px;
                font-size: 28px;
                font-family: "Showcard Gothic";
                padding: 8px;
            }
            QPushButton:hover {
                background-color: rgba(216, 110, 14, 180);
                color: #e1e8e4;
            }
            QPushButton:pressed {
                background-color: rgba(75, 53, 42, 255);
                color: white;
            }
        """)


        for b in [self.startButton, self.howtoplayButton, self.exitButton]:
            b.setFixedWidth(300)
            self.menuLayout.addWidget(b)

        self.layout.addLayout(self.menuLayout)

    def start_new_game(self):
        # üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ GamePage
        # ‡πÉ‡∏ä‡πâ self.stacked_widget (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà stacked_widget ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô scope)
        try:
            game_page = self.stacked_widget.widget(2)  # ‡∏î‡∏∂‡∏á GamePage ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            if game_page is not None and hasattr(game_page, "restart_game"):
                game_page.restart_game()
        except Exception as e:
            print("‚ùå Error restarting game:", e)

        # ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
        try:
            self.stacked_widget.setCurrentIndex(2)
        except Exception:
            pass

    def resizeEvent(self, event):
        if self.bg and self.bg.pixmap():
            self.bg.setGeometry(self.rect()) 
        super().resizeEvent(event)


    def close_main_window(self):
        main_window = self.window()
        if main_window:
            main_window.hide()
            main_window.deleteLater()


class HowToPlayPage1(QtWidgets.QWidget):
    def __init__(self, stacked_widget, parent=None):
        super().__init__(parent)
        self.stacked_widget = stacked_widget

        # ==== ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ====
        self.bg_base = QtWidgets.QLabel(self)
        bg_base_path = os.path.join(SOURCE_PATH, "Bg_base.png")
        if os.path.exists(bg_base_path):
            self.bg_base.setPixmap(QtGui.QPixmap(bg_base_path))
        self.bg_base.setScaledContents(True)

        self.bg = QtWidgets.QLabel(self)
        bg_path = os.path.join(SOURCE_PATH, "Howtoplay1.png")
        if os.path.exists(bg_path):
            self.bg.setPixmap(QtGui.QPixmap(bg_path))
        self.bg.setScaledContents(True)

        # ==== ‡∏õ‡∏∏‡πà‡∏° ====
        back_icon_path = os.path.join(SOURCE_PATH, "back_icon.png")
        self.btn_back = ImageButton(back_icon_path, size=(200, 100))
        self.btn_back.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(4))

        home_icon_path = os.path.join(SOURCE_PATH, "home_icon.png")
        self.btn_home = ImageButton(home_icon_path, size=(200, 100))
        self.btn_home.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))

        next_icon_path = os.path.join(SOURCE_PATH, "next_icon.png")
        self.btn_next = ImageButton(next_icon_path, size=(200, 100))
        self.btn_next.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(3))

        # ==== Layout ====
        top_layout = QtWidgets.QHBoxLayout()
        top_layout.addWidget(self.btn_back, alignment=QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_home, alignment=QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_next, alignment=QtCore.Qt.AlignRight | QtCore.Qt.AlignTop)

        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.addLayout(top_layout)
        main_layout.addStretch()

        # ==== Resize event ====
        self.resizeEvent = self._on_resize

    def _on_resize(self, event=None):
        """‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà resize"""
        w, h = self.width(), self.height()
        self.bg_base.setGeometry(0, 0, w, h)
        self.bg.setGeometry(0, 0, w, h)

class HowToPlayPage2(QtWidgets.QWidget):
    def __init__(self, stacked_widget, parent=None):
        super().__init__(parent)
        self.stacked_widget = stacked_widget

        # ==== ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ====
        self.bg_base = QtWidgets.QLabel(self)
        bg_base_path = os.path.join(SOURCE_PATH, "Bg_base.png")
        if os.path.exists(bg_base_path):
            self.bg_base.setPixmap(QtGui.QPixmap(bg_base_path))
        self.bg_base.setScaledContents(True)

        self.bg = QtWidgets.QLabel(self)
        bg_path = os.path.join(SOURCE_PATH, "Howtoplay2.png")
        if os.path.exists(bg_path):
            self.bg.setPixmap(QtGui.QPixmap(bg_path))
        self.bg.setScaledContents(True)

        # ==== ‡∏õ‡∏∏‡πà‡∏° ====
        back_icon_path = os.path.join(SOURCE_PATH, "back_icon.png")
        self.btn_back = ImageButton(back_icon_path, size=(200, 100))
        self.btn_back.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))

        home_icon_path = os.path.join(SOURCE_PATH, "home_icon.png")
        self.btn_home = ImageButton(home_icon_path, size=(200, 100))
        self.btn_home.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))

        next_icon_path = os.path.join(SOURCE_PATH, "next_icon.png")
        self.btn_next = ImageButton(next_icon_path, size=(200, 100))
        self.btn_next.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(4))

        # ==== Layout ====
        top_layout = QtWidgets.QHBoxLayout()
        top_layout.addWidget(self.btn_back, alignment=QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_home, alignment=QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_next, alignment=QtCore.Qt.AlignRight | QtCore.Qt.AlignTop)

        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.addLayout(top_layout)
        main_layout.addStretch()

        # ==== Resize event ====
        self.resizeEvent = self._on_resize

    def _on_resize(self, event=None):
        """‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà resize"""
        w, h = self.width(), self.height()
        self.bg_base.setGeometry(0, 0, w, h)
        self.bg.setGeometry(0, 0, w, h)

class HowToPlayPage3(QtWidgets.QWidget):
    def __init__(self, stacked_widget, parent=None):
        super().__init__(parent)
        self.stacked_widget = stacked_widget

        # ==== ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ====
        self.bg_base = QtWidgets.QLabel(self)
        bg_base_path = os.path.join(SOURCE_PATH, "Bg_base.png")
        if os.path.exists(bg_base_path):
            self.bg_base.setPixmap(QtGui.QPixmap(bg_base_path))
        self.bg_base.setScaledContents(True)

        self.bg = QtWidgets.QLabel(self)
        bg_path = os.path.join(SOURCE_PATH, "Howtoplay3.png")
        if os.path.exists(bg_path):
            self.bg.setPixmap(QtGui.QPixmap(bg_path))
        self.bg.setScaledContents(True)

        # ==== ‡∏õ‡∏∏‡πà‡∏° ====
        back_icon_path = os.path.join(SOURCE_PATH, "back_icon.png")
        self.btn_back = ImageButton(back_icon_path, size=(200, 100))
        self.btn_back.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(3))

        home_icon_path = os.path.join(SOURCE_PATH, "home_icon.png")
        self.btn_home = ImageButton(home_icon_path, size=(200, 100))
        self.btn_home.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))

        next_icon_path = os.path.join(SOURCE_PATH, "next_icon.png")
        self.btn_next = ImageButton(next_icon_path, size=(200, 100))
        self.btn_next.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))

        # ==== Layout ====
        top_layout = QtWidgets.QHBoxLayout()
        top_layout.addWidget(self.btn_back, alignment=QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_home, alignment=QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        top_layout.addWidget(self.btn_next, alignment=QtCore.Qt.AlignRight | QtCore.Qt.AlignTop)

        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.addLayout(top_layout)
        main_layout.addStretch()

        # ==== Resize event ====
        self.resizeEvent = self._on_resize

    def _on_resize(self, event=None):
        """‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà resize"""
        w, h = self.width(), self.height()
        self.bg_base.setGeometry(0, 0, w, h)
        self.bg.setGeometry(0, 0, w, h)

class ImageButton(QtWidgets.QPushButton):
    def __init__(self, image_path, size=(200, 100), parent=None):
        super().__init__(parent)
        self.image_path = image_path
        self.setFixedSize(*size)
        self.setCursor(QtCore.Qt.PointingHandCursor)
        self.setIcon(QtGui.QIcon(image_path))
        self.setIconSize(QtCore.QSize(*size))
        self.setStyleSheet("""
            QPushButton {
                border: 3px solid transparent;
                border-radius: 10px;
                background-color: transparent;
            }
        """)

class GameWidget(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.setStyleSheet("background-color: #8BC34A;")  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
        self.objects = []


        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏â‡∏≤‡∏Å
        self.create_game_objects()

        # ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡πÄ‡∏ä‡∏ü)
        self.has_item = False
        self.current_item = None
        self.held_icon = None

        self.placed_items = []
        self.chopping_board_icons = []

        self.pot_icons = []  # ‡πÄ‡∏Å‡πá‡∏ö QLabel ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô pot
        self.pot_contents = [] # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö

        self.obstacles = []
        wdutil._create_invisible_walls(self)

        self.chef = QtWidgets.QLabel(self)
        chef_pixmap = QtGui.QPixmap(f"{SOURCE_PATH}/chef.png")

        # ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö transparency ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô
        self.chef.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.chef.setStyleSheet("background: transparent;")

        self.chef.setPixmap(chef_pixmap)
        self.chef.setScaledContents(True)
        self.chef.resize(111.875, 133.33)
        self.chef.move(200, 200)
        self.chef_speed = 10


        # ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_position)
        self.timer.start(16)
        self.pressed_keys = set()

    def create_image_object(self, x, y, w, h, image_name):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á QLabel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û"""
        obj = QtWidgets.QLabel(self)
        obj.setGeometry(x, y, w, h)
        obj.setStyleSheet("background: transparent;")
        pix = QtGui.QPixmap(f"{SOURCE_PATH}/{image_name}")
        obj.setPixmap(pix)
        obj.setScaledContents(True)
        self.objects.append(obj)
        return obj

    def create_game_objects(self):
        # ‡πÄ‡∏ï‡∏≤ (stove)
        self.pot = self.create_image_object(280, 145, 90, 106, "pot.png")
        self.pot_icons = []
        self.pot_contents = []

        self.chopping_board = self.create_image_object(427, 180, 70, 50, "chopping_board.png")
        self.chopping_board_icons = []

        # ‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü (serve)
        self.serve_station = self.create_image_object(1060, 158, 160, 229, "serve_station.png")
        self.plate_station = self.create_image_object(1065, 353, 100, 85, "plate_station.png")
        self.trash_bin = self.create_image_object(958, 172, 85, 85, "trash_bin.png")

        # ‡πÇ‡∏ï‡πä‡∏∞ (table)
        self.create_image_object(150, 500, 1240, 715, "table.png")

        # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö (ingredients)
        self.ingredients = []  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö

        tomato = self.create_image_object(845, 463, 77, 77, "tomato.png")
        lettuce = self.create_image_object(783, 448, 85, 125, "lettuce.png")
        cucamber = self.create_image_object(900, 462, 85, 75, "cucamber.png")

        # ‡πÉ‡∏™‡πà‡πÉ‡∏ô list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô
        self.ingredients = [
            {"name": "tomato", "widget": tomato},
            {"name": "lettuce", "widget": lettuce},
            {"name": "cucamber", "widget": cucamber},
        ]


    def keyPressEvent(self, event):
        key = event.key()
        self.pressed_keys.add(key)

        # üéØ ‡∏õ‡∏∏‡πà‡∏° F = ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏´‡∏¢‡∏¥‡∏ö, ‡πÉ‡∏™‡πà‡∏à‡∏≤‡∏ô, ‡∏ó‡∏¥‡πâ‡∏á, ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏ô)
        if key == QtCore.Qt.Key_F:

            # ----- 1Ô∏è‚É£ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà -----
            if self.has_item:
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ ‚Üí ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á
                if wdutil.is_near_trash(self):
                    wdutil.try_throw_item_to_trash(self)

                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏ô ‚Üí ‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡∏à‡∏≤‡∏ô
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ plate station ‚Üí ‡πÉ‡∏™‡πà‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà station
                elif hasattr(self, "plate_station") and wdutil.is_near_object(self.chef, self.plate_station):
                    wdutil.add_item_to_plate(self, self.current_item)
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠
                    self.has_item = False
                    self.current_item = None
                    if getattr(self, "held_icon", None):
                        self.held_icon.deleteLater()
                        self.held_icon = None

                elif getattr(self, "dropped_plates", None) and any(
                    wdutil.is_near_object(self.chef, plate_dict.get("label"))
                    for plate_dict in self.dropped_plates
                    if plate_dict.get("label") is not None
                ):
                    # ‡∏´‡∏≤ plate ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡πÑ‡∏õ‡∏ö‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô
                    for plate_dict in list(self.dropped_plates):
                        plate_label = plate_dict.get("label")
                        if plate_label and wdutil.is_near_object(self.chef, plate_label):
                            wdutil.add_item_to_dropped_plate(self, plate_dict, self.current_item)
                            self.update()
                            QtWidgets.QApplication.processEvents()
                            break

                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠
                    self.has_item = False
                    self.current_item = None
                    if getattr(self, "held_icon", None):
                        self.held_icon.deleteLater()
                        self.held_icon = None

                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ‚Üí ‡πÉ‡∏™‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠
                elif getattr(self, "has_plate", False):
                    wdutil.add_item_to_held_plate(self, self.current_item)
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠
                    self.has_item = False
                    self.current_item = None
                    if getattr(self, "held_icon", None):
                        self.held_icon.deleteLater()
                        self.held_icon = None

                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‚Üí ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á (drop)
                else:
                    wdutil.drop_item(self)

            # ----- 2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡πÅ‡∏ï‡πà‡∏ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà -----
            elif getattr(self, "has_plate", False):
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ ‚Üí ‡∏ó‡∏¥‡πâ‡∏á‡∏à‡∏≤‡∏ô
                if wdutil.is_near_trash(self):
                    wdutil.throw_plate_to_trash(self)
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü ‚Üí ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏à‡∏≤‡∏ô
                elif wdutil.try_serve_plate(self):
                    # ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÉ‡∏´‡πâ
                    return
                else:
                    pass  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ß‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° G ‡∏ß‡∏≤‡∏á‡πÅ‡∏ó‡∏ô)

            # ----- 3Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏•‡∏¢ -----
            else:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏≤‡∏ô‡∏°‡∏µ priority ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ item)
                if wdutil.try_pickup_plate(self):
                    return
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏≤‡∏ô ‚Üí ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÅ‡∏ó‡∏ô
                wdutil.try_pick_item(self)

        # üéØ ‡∏õ‡∏∏‡πà‡∏° G = ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á/‡∏à‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
        elif key == QtCore.Qt.Key_G:
            if getattr(self, "has_plate", False):
                wdutil.drop_plate(self)
            elif self.has_item:
                wdutil.drop_item(self)

        # üî™ ‡∏õ‡∏∏‡πà‡∏° Space = ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ action ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á
        elif key == QtCore.Qt.Key_Space:
            print("space bar preesed")
            wdutil.process_space_action(self)

    def keyReleaseEvent(self, event):
        key = event.key()
        if key in self.pressed_keys:
            self.pressed_keys.remove(key)

    def update_position(self):
        dx = dy = 0
        if QtCore.Qt.Key_Left in self.pressed_keys:
            dx -= self.chef_speed
        if QtCore.Qt.Key_Right in self.pressed_keys:
            dx += self.chef_speed
        if QtCore.Qt.Key_Up in self.pressed_keys:
            dy -= self.chef_speed
        if QtCore.Qt.Key_Down in self.pressed_keys:
            dy += self.chef_speed

        if dx == 0 and dy == 0:
            return

        new_x = max(0, min(self.chef.x() + dx, self.width() - self.chef.width()))
        new_y = max(0, min(self.chef.y() + dy, self.height() - self.chef.height()))

        can_move = wdutil._can_move_to(self, new_x, new_y)

        if not can_move:
            return

        self.chef.move(new_x, new_y)

        if getattr(self, "held_icon", None):
            icon_x = new_x + (self.chef.width() - self.held_icon.width()) // 2
            icon_y = new_y - self.held_icon.height() - 5
            self.held_icon.move(icon_x, icon_y)

        if getattr(self, "has_plate", False) and hasattr(self, "held_plate"):
            wdutil.update_plate_position(self, self.chef, self.held_plate)


class Overlay(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("background-color: rgba(0, 0, 0, 0);")

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setAlignment(QtCore.Qt.AlignCenter)

        # -----------------------------
        # üîπ ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á pause_bg.png
        # -----------------------------
        self.bg_label = QtWidgets.QLabel(self)
        bg_path = os.path.join(SOURCE_PATH, "pause_bg.png")
        pix = QtGui.QPixmap(bg_path)
        scaled_pix = pix.scaled(600, 500, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
        self.bg_label.setPixmap(scaled_pix)
        self.bg_label.setScaledContents(False)
        self.bg_label.setAlignment(QtCore.Qt.AlignCenter)

        parent_w, parent_h = 1200, 675
        pix_w, pix_h = scaled_pix.width(), scaled_pix.height()
        x = (parent_w - pix_w) // 2
        y = (parent_h - pix_h) // 2
        self.bg_label.setGeometry(x, y, pix_w, pix_h)

        # -----------------------------
        # üîπ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        # -----------------------------
        self.message_label = QtWidgets.QLabel("", self)
        self.message_label.setStyleSheet("""
            QLabel {
                color: #fff7d6; /* ‡∏™‡∏µ‡∏Ñ‡∏£‡∏µ‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô */
                font: bold 20px 'Comic Sans MS';
                background-color: transparent;
                padding: 4px;
                border: None;
                qproperty-alignment: AlignCenter;
                text-shadow: 58px 85px 10px #1c1308; /* ‡πÄ‡∏á‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô */
            }
        """)

        self.message_label.setAlignment(QtCore.Qt.AlignCenter)
        self.layout.addWidget(self.message_label)

        # -----------------------------
        # üîπ ‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å Pause Mode)
        # -----------------------------
        continue_icon_path = os.path.join(SOURCE_PATH, "continue_icon.png")
        quit_icon_path = os.path.join(SOURCE_PATH, "quit_icon.png")

        self.continue_btn = ImageButton(continue_icon_path, size=(200, 100))
        self.quit_btn = ImageButton(quit_icon_path, size=(200, 100))

        self.layout.addWidget(self.continue_btn)
        self.layout.addWidget(self.quit_btn)

        # state flag
        self.is_game_over = False
        self.restart_btn = None  # ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≠‡∏ô Game Over ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

    # -----------------------------
    # üî∏ ‡πÇ‡∏´‡∏°‡∏î Pause
    # -----------------------------
    def set_paused(self):
        self.is_game_over = False
        self.message_label.setText("Paused")

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ restart_btn ‡∏à‡∏≤‡∏Å game over ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
        if self.restart_btn:
            self.layout.removeWidget(self.restart_btn)
            self.restart_btn.deleteLater()
            self.restart_btn = None

        # ‡∏ñ‡πâ‡∏≤ continue_btn ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ (‡∏à‡∏≤‡∏Å game over) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        if not hasattr(self, "continue_btn") or self.continue_btn is None:
            continue_icon_path = os.path.join(SOURCE_PATH, "continue_icon.png")
            self.continue_btn = ImageButton(continue_icon_path, size=(200, 100))
            self.layout.insertWidget(1, self.continue_btn)

    # -----------------------------
    # üî∏ ‡πÇ‡∏´‡∏°‡∏î Game Over
    # -----------------------------
    def set_game_over(self, score):
        self.is_game_over = True
        self.message_label.setText(f"Game Over\nScore: {score}")

        # ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏° continue ‡∏≠‡∏≠‡∏Å
        if self.continue_btn:
            self.layout.removeWidget(self.continue_btn)
            self.continue_btn.deleteLater()
            self.continue_btn = None

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° restart ‡πÅ‡∏ó‡∏ô
        if not self.restart_btn:
            restart_icon_path = os.path.join(SOURCE_PATH, "restart_icon.png")
            self.restart_btn = ImageButton(restart_icon_path, size=(200, 100))
            self.layout.insertWidget(1, self.restart_btn)

            # ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö GamePage ‡∏ú‡πà‡∏≤‡∏ô parent
            try:
                parent = self.parent()
                if hasattr(parent, "_overlay_continue_clicked"):
                    self.restart_btn.clicked.connect(parent._overlay_continue_clicked)
            except Exception as e:
                print("‚ö†Ô∏è Cannot connect restart button:", e)

class GamePage(QtWidgets.QWidget):
    """‡πÅ‡∏ó‡∏ô MainWindow ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô QWidget"""
    def __init__(self, stacked_widget, parent=None):
        super().__init__(parent)
        self.stacked_widget = stacked_widget

        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)

        self.bg_label = QtWidgets.QLabel(self)
        self.bg_label.setScaledContents(True)  # ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà widget
        self.bg_pixmap = QtGui.QPixmap(f"{SOURCE_PATH}/bg_kitchen.png")
        self.bg_label.setPixmap(self.bg_pixmap)
        self.bg_label.lower()

        self.bg_label.setScaledContents(True)
        self.bg_label.setGeometry(0, 0, 1200, 675)

        self.game_widget = GameWidget()
        layout.addWidget(self.game_widget)
        # ‡πÉ‡∏´‡πâ GameWidget ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å GamePage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï orders/score ‡πÑ‡∏î‡πâ
        try:
            self.game_widget.game_page = self
        except Exception:
            pass
        self.game_widget.setFocus()

        # Score / Time / Orders labels (create early so helpers can use them)
        self.score_bg = QtWidgets.QLabel(self)
        self.score_bg.setGeometry(10, 610, 80, 80)  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        self.score_bg.setStyleSheet("""
            QLabel {
                background-color: #FFD54F;        /* ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á */
                border: 3px solid #E0B000;        /* ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏° */
                border-radius: 40px;              /* ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏° */
            }
        """)

        self.score_label = QtWidgets.QLabel("0", self)
        self.score_label.setGeometry(10, 600, 80, 80) 
        self.score_label.setAlignment(QtCore.Qt.AlignCenter)
        self.score_label.setStyleSheet("""
            QLabel {
                color: white;
                font-family: "Showcard Gothic"; 
                font-size: 48px;
                font-weight: bold;
                text-shadow: 2px 2px 4px black;
            }
        """)

        # ====== ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏° ======
        self.clock_bg = QtWidgets.QLabel(self)
        self.clock_bg.setGeometry(1105, 610, 80, 80)
        self.clock_bg.setStyleSheet("""
            QLabel {
                background-color: gray;
                border-radius: 40px;
            }
        """)

        self.remaining_time = 300
        self.time_label = QtWidgets.QLabel(str(self.remaining_time), self)
        self.time_label.setGeometry(1105, 600, 80, 80)
        self.time_label.setAlignment(QtCore.Qt.AlignCenter)
        self.time_label.setStyleSheet("""
            QLabel {
                color: white;
                font-family: "Showcard Gothic";
                font-size: 48px;       /* ‡πÄ‡∏•‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
                font-weight: bold;
            }
        """)

        # Game clock
        self.time_label.setText(f"{self.remaining_time}")
        self.game_clock = QtCore.QTimer(self)
        self.game_clock.timeout.connect(self._tick_game_clock)
        self.game_clock.start(1000)

        # üîπ Order Display (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
        self.order_container = QtWidgets.QWidget(self)
        self.order_container.setGeometry(0, 0, 300, 130)

        bg_path = os.path.join(os.path.dirname(__file__), "source_image", "image", "bg_order.png")
        self.order_bg = QtWidgets.QLabel(self.order_container)
        self.order_bg.setGeometry(0, 0, 300, 130)
        self.order_bg.setScaledContents(True)
        if os.path.exists(bg_path):
            self.order_bg.setPixmap(QtGui.QPixmap(bg_path))

        self.order_layout = QtWidgets.QHBoxLayout(self.order_container)
        self.order_layout.setContentsMargins(20, 0, 0, 0)
        self.order_layout.setSpacing(2)

        # ‡πÇ‡∏´‡∏•‡∏î order ‡∏à‡∏≤‡∏Å recipe dict
        try:
            files = os.listdir(os.path.join(os.path.dirname(__file__), "source_image", "image"))
            combos = [f[len("order_"):-4] for f in files if f.startswith("order_") and f.lower().endswith('.png')]
        except Exception:
            combos = []
        if not combos:
            combos = ["tomato_soup", "delux_salad", "lettuce_salad","tomato_lettuce_salad"]

        self.orders = [random.choice(combos) for _ in range(3)]
        self._refresh_orders_images()

        self.game_widget.current_orders = self.orders

        # ‡∏õ‡∏∏‡πà‡∏° Pause
        self.pause_icon_path = os.path.join(SOURCE_PATH, "pause_icon.png")
        self.pause_btn = ImageButton(self.pause_icon_path, size=(180, 80), parent=self)
        self.pause_btn.clicked.connect(self.show_overlay)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        self.pause_btn.move(self.width() - 200, 20)  # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤ 20px
        self.pause_btn.raise_()  # ‚úÖ ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î (‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ widget ‡∏≠‡∏∑‡πà‡∏ô)

        # Overlay
        self.overlay = Overlay(self)
        self.overlay.setGeometry(0, 0, 1200, 675)
        self.overlay.hide()
        # connect to a handler that can decide between resume or restart
        self.overlay.continue_btn.clicked.connect(self._overlay_continue_clicked)
        self.overlay.quit_btn.clicked.connect(self.back_to_menu)

        
    def _refresh_orders_images(self):
        # ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        while self.order_layout.count():
            item = self.order_layout.takeAt(0)
            w = item.widget()
            if w:
                w.deleteLater()

        # ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for order in self.orders:
            lbl = QtWidgets.QLabel()
            path = os.path.join(os.path.dirname(__file__), "source_image", "image", f"order_{order}.png")
            if os.path.exists(path):
                pix = QtGui.QPixmap(path)
            lbl.setPixmap(pix.scaled(80, 80, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
            self.order_layout.addWidget(lbl)

    def serve_dish_to_order(self, dish_name: str):
        if dish_name in self.orders:
            self.orders.remove(dish_name)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 3
            try:
                files = os.listdir(os.path.join(os.path.dirname(__file__), "source_image", "image"))
                combos = [f[len("order_"):-4] for f in files if f.startswith("order_") and f.lower().endswith('.png')]
            except Exception:
                combos = ["tomato_soup", "delux_salad", "lettuce_salad","tomato_lettuce_salad"]

            while len(self.orders) < 3:
                self.orders.append(random.choice(combos))

            self._refresh_orders_images()


    def resizeEvent(self, event):
        self.bg_label.setGeometry(0, 0, self.width(), self.height())
        self.overlay.setGeometry(0, 0, self.width(), self.height())
        self.pause_btn.move(self.width() - 170, 0)
        super().resizeEvent(event)

    def showEvent(self, event):
        # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ GamePage ‡∏õ‡∏£‡∏≤‡∏Å‡∏é ‡πÉ‡∏´‡πâ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà game_widget ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö key events (‡πÄ‡∏ä‡πà‡∏ô Space)
        try:
            self.game_widget.setFocus()
        except Exception:
            pass
        super().showEvent(event)

    def show_overlay(self):
        # pause game timers
        try:
            self.game_clock.stop()
        except Exception:
            pass
        try:
            self.game_widget.timer.stop()
        except Exception:
            pass
        # Set overlay to paused mode and show
        try:
            self.overlay.set_paused()
        except Exception:
            pass
        self.overlay.show()

    def hide_overlay(self):
        self.overlay.hide()
        # resume game timers
        try:
            self.game_clock.start(1000)
        except Exception:
            pass
        try:
            self.game_widget.timer.start(16)
        except Exception:
            pass

    def _tick_game_clock(self):
        self.remaining_time -= 1
        if self.remaining_time < 0:
            self.remaining_time = 0

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á ‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ 'Time:'
        self.time_label.setText(str(self.remaining_time))

        if self.remaining_time <= 0:
            # time up -> show overlay and stop timers
            try:
                self.game_clock.stop()
            except Exception:
                pass
            try:
                self.game_widget.timer.stop()
            except Exception:
                pass
            # show game-over overlay with final score
            try:
                score = int(self.score_label.text())
            except Exception:
                score = 0
            try:
                self.overlay.set_game_over(score)
            except Exception:
                pass
            self.overlay.show()

    def _overlay_continue_clicked(self):
        """Called when overlay continue/restart button is clicked."""
        try:
            if getattr(self.overlay, 'is_game_over', False):
                self.restart_game()
            else:
                self.hide_overlay()
        except Exception:
            try:
                self.hide_overlay()
            except Exception:
                pass

    def restart_game(self):
        """Reset game state to allow a fresh playthrough."""
        # reset time and score
        self.remaining_time = 330
        self.time_label.setText(f"{self.remaining_time}")
        self.score_label.setText("0")

        # clear items from the game widget
        gw = self.game_widget
        try:
            for lbl in list(getattr(gw, 'placed_items', [])):
                try:
                    lbl.deleteLater()
                except Exception:
                    pass
            gw.placed_items = []
        except Exception:
            gw.placed_items = []

        try:
            for lbl in list(getattr(gw, 'pot_icons', [])):
                try:
                    lbl.deleteLater()
                except Exception:
                    pass
            gw.pot_icons = []
            gw.pot_contents = []
        except Exception:
            gw.pot_icons = []
            gw.pot_contents = []

        try:
            for lbl in list(getattr(gw, 'chopping_board_icons', [])):
                try:
                    lbl.deleteLater()
                except Exception:
                    pass
            gw.chopping_board_icons = []
        except Exception:
            gw.chopping_board_icons = []

        try:
            for pd in list(getattr(gw, 'dropped_plates', [])):
                try:
                    lab = pd.get('label')
                    if lab:
                        lab.deleteLater()
                except Exception:
                    pass
            gw.dropped_plates = []
        except Exception:
            gw.dropped_plates = []

        try:
            if getattr(gw, 'held_plate', None):
                gw.held_plate.deleteLater()
            gw.held_plate = None
        except Exception:
            gw.held_plate = None

        try:
            if getattr(gw, 'held_icon', None):
                gw.held_icon.deleteLater()
            gw.held_icon = None
        except Exception:
            gw.held_icon = None

        gw.has_item = False
        gw.current_item = None
        gw.has_plate = False
        gw.plate_items = []
        gw.station_plate_items = []
        gw.pot_icons = []

        # regenerate orders
        try:
            files = os.listdir(os.path.join(os.path.dirname(__file__), "source_image", "image"))
            # orders are represented by files named order_<name>.png
            combos = [f[len("order_"):-4] for f in files if f.startswith("order_") and f.lower().endswith('.png')]
        except Exception:
            combos = []
        if not combos:
            combos = ["tomato_soup", "delux_salad", "lettuce_salad","tomato_lettuce_salad"]
        import random
        self.orders = [random.choice(combos) for _ in range(3)]
        # Refresh order images in the UI and sync gamestate
        self._refresh_orders_images()
        try:
            self.game_widget.current_orders = self.orders
        except Exception:
            pass

        # hide overlay and restart timers
        try:
            self.overlay.set_paused()
        except Exception:
            pass
        try:
            self.overlay.hide()
        except Exception:
            pass
        try:
            self.game_clock.start(1000)
        except Exception:
            pass
        try:
            self.game_widget.timer.start(16)
        except Exception:
            pass

    def _refresh_orders_label(self):
        # display orders nicely
        disp = " | ".join(self.orders)
        self.order_label.setText(f"Orders: {disp}")

    def back_to_menu(self):
        self.overlay.hide()
        self.stacked_widget.setCurrentIndex(0)

class WellDoneGame(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Well Done! üßë‚Äçüç≥")
        self.resize(1200, 675)

        self.stacked = QtWidgets.QStackedWidget()
        self.page1 = GameMenu(self.stacked)
        self.page2 = HowToPlayPage1(self.stacked)
        self.page3 = GamePage(self.stacked)
        self.page4 = HowToPlayPage2(self.stacked)
        self.page5 = HowToPlayPage3(self.stacked)

        self.stacked.addWidget(self.page1)
        self.stacked.addWidget(self.page2)
        self.stacked.addWidget(self.page3)
        self.stacked.addWidget(self.page4)
        self.stacked.addWidget(self.page5)
        self.setCentralWidget(self.stacked)


def run():
    global ui
    try:
        ui.close()
        ui.deleteLater()
    except:
        pass

    ptr = wrapInstance(int(omui.MQtUtil.mainWindow()), QtWidgets.QWidget)
    ui = WellDoneGame(parent=ptr)
    ui.show()